{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","APIURL","playsInline","autoPlay","muted","loop","id","e","target","value","prevState","axios","then","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6PAiBeA,EAfA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OAC3B,OACI,6BAASC,UAAU,kBACf,2BACIA,UAAU,aACVC,KAAK,OACLC,YAAY,kBACZC,SAAUL,EACVM,WAAYL,MCEbM,EAVA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACtB,OACI,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACpD,yBAAKC,IAAKJ,EAAOK,OAAQC,IAAI,iBAC7B,4BAAKN,EAAOO,SCSTC,EAZC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASR,EAAgB,EAAhBA,UAExB,OACI,6BAASP,UAAU,WACde,EAAQC,KAAI,SAAAV,GAAM,OACf,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCWxDW,EAjBD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACvB,OACI,6BAASpB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAMmB,EAASN,MAAf,IAAuB,kCAAQM,EAASE,KAAjB,MACvB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACX,yBAAKU,IAAKS,EAASR,OAAQC,IAAI,iBAC/B,2BAAIO,EAASI,OAEjB,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,YCkEDI,EAtEH,WAAO,IAAD,EACUC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KAJI,mBACTQ,EADS,KACFC,EADE,KAOVC,EAAS,0CAwCf,OACE,yBAAK7B,UAAU,OACb,2BAAO8B,aAAW,EAACC,SAAS,WAAWC,OAAO,EAAMC,MAAM,EAAMC,GAAG,YACjE,4BAAQxB,IAAI,mFAAmFT,KAAK,eAGtG,gCACE,6CAEF,8BACE,kBAAC,EAAD,CAAQH,YAnCM,SAACqC,GACnB,IAAIT,EAAIS,EAAEC,OAAOC,MACjBT,GAAS,SAAAU,GACP,OAAO,2BAAKA,GAAZ,IAAuBZ,EAAGA,QAgCU3B,OAhDzB,SAACoC,GACA,UAAVA,EAAElB,KACJsB,IAAMV,EAAS,MAAQF,EAAMD,GAC5Bc,MAAK,YAAe,IACfzB,EADc,EAAX0B,KACY5C,OAEnB+B,GAAS,SAAAU,GACP,OAAO,2BAAKA,GAAZ,IAAuBvB,QAASA,aA0ClC,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASR,UA7BrB,SAAA2B,GAChBQ,QAAQC,IAAIT,GACZK,IAAMV,EAAS,MAAQK,GAAIM,MAAK,YAAe,IACzClC,EADwC,EAAXmC,KAEjCC,QAAQC,IAAIrC,GAEZsB,GAAS,SAAAU,GACP,OAAO,2BAAKA,GAAZ,IAAuBnB,SAAUb,aAyBC,oBAAxBqB,EAAMR,SAASN,OACrB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WArBxB,WACjBQ,GAAS,SAAAU,GACP,OAAO,2BAAKA,GAAZ,IAAuBnB,SAAU,cCvCnByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.f3d02922.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Search = ({ handleInput, search }) => {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input \r\n                className=\"search-box\" \r\n                type=\"text\" \r\n                placeholder=\"search movie...\" \r\n                onChange={handleInput}\r\n                onKeyPress={search} \r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Search","import React from 'react'\r\n\r\nconst Result = ({ result, openPopup }) => {\r\n    return (\r\n        <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\r\n            <img src={result.Poster} alt=\"movie poster\" />\r\n            <h3>{result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\n\r\nconst Results = ({ results, openPopup }) => {\r\n\r\n    return (\r\n        <section className=\"results\">\r\n            {results.map(result => (\r\n                <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nconst Popup = ({ selected, closePopup }) => {\r\n    return (\r\n        <section className=\"popup\">\r\n            <div className=\"content\">\r\n                <h2>{ selected.Title } <span>({selected.Year})</span></h2>\r\n                <p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n                <div className=\"plot\">\r\n                    <img src={selected.Poster} alt=\"movie poster\" />\r\n                    <p>{selected.Plot}</p>\r\n                </div>\r\n                <button className=\"close\" onClick={closePopup}>Close</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Popup","import React, { useState } from 'react';\nimport axios from 'axios'\n\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\n\n\nconst App = () => {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n\n  const APIURL = \"http://www.omdbapi.com/?apikey=1f82700e\"\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(APIURL + \"&s=\" + state.s)\n      .then(({ data }) => {\n        let results = data.Search\n    \n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      })\n    }\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n  }\n\n  const openPopup = id => {\n    console.log(id);\n    axios(APIURL + \"&i=\" + id).then(({ data }) => {\n      let result = data\n      console.log(result)\n\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <video playsInline autoPlay='autoplay' muted={true} loop={true} id=\"bg-video\">\n        <source src=\"https://aegwebprod.blob.core.windows.net/content/video/multiverse/multiverse.mp4\" type=\"video/mp4\" />\n      </video>\n\n      <header>\n        <h1>Movie Search</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search}/>\n        <Results results={state.results} openPopup={openPopup} />\n\n        {\n          (typeof state.selected.Title != \"undefined\") \n          ? <Popup selected={state.selected} closePopup={closePopup} /> \n          : false\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}